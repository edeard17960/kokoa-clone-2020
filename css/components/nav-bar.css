.nav {
	position: fixed; /*스크롤을 해도 항상 고정되어있다. 방향은 밑에 방향:?px; 이렇게 써주면 된다.*/
	bottom: 0px;
	width: 100%;
	box-sizing: border-box;
	/* box-sizing : border-box; 는 예를 들어 200px인 박스가 있는데
    거기에 패딩을 50px를 준다고 가정해보자. 그러면 css는 200px의 크기를 적용하면서
    패딩까지 줘야한다고 생각하고 박스의 크기를 아예 250으로 만들어 버린다.
    그래서 패딩 50, 박스안의 크기 200을 주므로 총 길이가 250이 되버린다.
    그래서 밀려나가게 되고 이를 방지해주기 위해서 box-sizing: border-box;
    를 써주면 200px의 크기를 유지해주면서 50px의 패딩을 주므로 밀려나가지 않고
    패딩 50, 박스안에 크기 150px로 해주므로 총 길이가 200이 되면서
     밀려나가지 않게된다.*/
	background-color: #f9f9fa;
	padding: 20px 50px;
	border-top: 1px solid rgba(122, 122, 122, 0.3);
}
.nav__list {
	display: flex;
	justify-content: space-between;
}
.nav__link {
	position: relative;
	color: #2e373d;
}
@keyframes notificationAnimation {
	0% {
		transform: none;
	}
	50% {
		transform: translateY(-10px) rotateY(180deg);
	}
	100% {
		transform: none;
	}
}
.nav__notification {
	position: absolute; /* 상위 포지션이 relative이면  이 메세지 아이콘에서만 적용이 되므로 
    .nav__link에 position:relative 해줘야하고 position: absolute는 어떤 곳에서든 국한
    되지 않고 겹쳐 쓸 수도 있는 특성을 가짐*/
	left: 20px;
	bottom: 16px;
	animation: notificationAnimation 3s ease-in-out infinite;
}

.nav__notice {
	background-color: tomato;
	display: flex;
	height: 5px;
	width: 5px;
	border-radius: 2.5px;
	position: absolute;
	right: 42px;
}

@keyframes appearBtnAnimation {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
		transform: none;
	}
}
.nav__btn {
	transform: translateY(50px);
	opacity: 0;
	animation: appearBtnAnimation 0.5s ease-in-out forwards;
}

.nav__btn:nth-child(2) {
	animation-delay: 0.2s;
}
.nav__btn:nth-child(3) {
	animation-delay: 0.4s;
}
.nav__btn:last-child {
	animation-delay: 0.6s;
}
